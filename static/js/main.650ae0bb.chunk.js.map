{"version":3,"sources":["assets/logo.svg","assets/githubBackground.svg","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositores","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","createGlobalStyle","githubBackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.650ae0bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubBackground.0b819d63.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n   baseURL: 'https://api.github.com/'\n});\n\nexport default api;\n\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished'\n\ninterface FormProps {\n    hasError: boolean;\n}\n\nexport const Title = styled.h1`\n    font-size: 48px;\n    color: #3a3a3a;\n    max-width: 450px;\n    line-height: 56px;\n\n    margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n    margin-top: 40px;\n    max-width: 700px;\n\n    display: flex;\n\n    input {\n        flex: 1;\n        height: 70px;\n        padding: 0 24px;\n        border-radius: 5px 0 0 5px;\n        color: #3a3a3a;\n        border: 2px solid #fff;\n        border-right: 0;\n\n        ${(props) => props.hasError && css`\n        border-color: #c53030;\n        \n        `}\n    }\n\n    &::placeholder {\n        color: #3a3a3a;\n    }\n\n    button {\n        width: 210px;\n        height: 70px;\n        background: #04D361;\n        border-radius: 0px 5px 5px 0px;\n        border: 0;\n        color: #FFF;\n        font-weight: bold;\n        transition: background-color 0.2s; \n\n        &:hover {\n            background: ${shade(0.2, '#04D361')};\n        }\n    }\n`;\n\nexport const Error = styled.span`\n    display: block;\n    color: #c53030;\n    margin-top: 10px;\n\n`;\n\nexport const Repositories = styled.div`\nmargin-top: 80px;\nmax-width: 700px;\n\na {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n        margin-top: 16px;\n    }\n\n    img {\n        width: 64px;\n        height: 64px;\n        border-radius: 50%;\n    }\n\n    div {\n        margin: 0 16px;\n        flex: 1;\n\n        strong {\n            font-size: 20px;\n            color: #3D3D4D;\n        }\n\n        p {\n            font-size: 18px;\n            color: #a8a8b3;\n            margin-top: 4px;\n        }\n    }\n\n    svg {\n        margin-left: auto;\n        color: #cbcbd6;\n    }\n\n    &:hover{\n        transform: translateX(10px);\n    }\n}\n `;\n\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg'\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n    full_name: string,\n    description: string,\n    owner: {\n        login: string,\n        avatar_url: string;\n    }\n}\n\nconst Dashboard: React.FC = () => {\n    const [newRepo, setNewRepo] = useState('');\n    const [inputError, setInputError] = useState('');\n    const [repositories, setRepositores] = useState<Repository[]>(() => {\n        const storageRepositories = localStorage.getItem('@GihubExplorer:repositories');\n\n        if (storageRepositories) {\n            return JSON.parse(storageRepositories)\n        } else {\n            return [];\n        }\n    });\n\n\n\n    useEffect(() => {\n        localStorage.setItem('@GihubExplorer:repositories', JSON.stringify(repositories));\n    }, [repositories])\n\n    async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n        event.preventDefault();\n        if (!newRepo) {\n            setInputError('Digite o autor/nome do reposit贸rio');\n            return;\n        }\n\n        try {\n            const response = await api.get(`repos/${newRepo}`);\n\n            const repository = response.data\n\n            setRepositores([...repositories, repository]);\n            setNewRepo('');\n            setInputError('');\n        } catch (err) {\n            setInputError('Reposit贸rio inexistente!');\n        }\n\n    }\n\n    return (\n        <>\n            <img src={logoImg} alt=\"GitHub Explorer\" />\n            <Title>Explore reposit贸rios no Github</Title>\n\n            <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n                <input value={newRepo}\n                    onChange={(e) => setNewRepo(e.target.value)}\n                    placeholder=\"Digite o nome do reposit贸rio!\" />\n                <button type=\"submit\">Pesquisar</button>\n            </Form>\n\n            {inputError && <Error>{inputError}</Error>}\n\n            <Repositories>\n                {repositories.map(repository => (\n                    <Link key={repository.full_name} to={`/repositories/${repository.full_name}`}>\n                        <img src={repository.owner.avatar_url}\n                            alt={repository.owner.login} />\n\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n\n                        <FiChevronRight size={20} />\n                    </Link>\n                ))}\n            </Repositories>\n        </>\n    )\n}\n\nexport default Dashboard;","import styled from 'styled-components';\n\nexport const Header = styled.header`\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\n\na {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color;\n\n    &:hover{\n        color: #666\n    }\n\n    svg {\n        margin-right: 4px;\n    }\n}\n`;\n\nexport const RepositoryInfo = styled.section`\nmargin-top: 80px;\nheader {\n    display: flex;\n    align-items: center;\n\n    img {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%50%;\n    }\n\n    div {\n        margin-left: 24px;\n\n        strong {\n            font-size: 18px;\n            color: #3d3d4d;\n        }\n\n        p {\n            font-size: 18px;\n            color: #737380;\n            margin-top: 4px;\n        }\n    }\n}\n\nul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n}\n\nli {\n\n    & + li {\n        margin-left: 80px;\n    }\n    strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d\n    }\n\n    span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n    }\n}\n`;\n\nexport const Issues = styled.div`\nmargin-top: 80px;\n\n\na {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n        margin-top: 16px;\n    }\n\n    div {\n        margin: 0 16px;\n        flex: 1;\n\n        strong {\n            font-size: 20px;\n            color: #3D3D4D;\n        }\n\n        p {\n            font-size: 18px;\n            color: #a8a8b3;\n            margin-top: 4px;\n        }\n    }\n\n    svg {\n        margin-left: auto;\n        color: #cbcbd6;\n    }\n\n    &:hover{\n        transform: translateX(10px);\n    }\n}\n `;","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { FiChevronsLeft, FiChevronRight } from 'react-icons/fi'\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n    repository: string;\n}\n\ninterface Repository {\n    full_name: string,\n    description: string,\n    stargazers_count: number;\n    forks_count: number;\n    open_issues_count: number;\n    owner: {\n        login: string,\n        avatar_url: string;\n    }\n}\n\ninterface Issue {\n    title: string;\n    html_url: string;\n    id: number;\n    user: {\n        login: string;\n    }\n}\n\nconst Repository: React.FC = () => {\n    const [repository, setRepository] = useState<Repository | null>(null);\n    const [issues, setIssues] = useState<Issue[]>([]);\n\n\n    const { params } = useRouteMatch<RepositoryParams>();\n\n    useEffect(() => {\n        api.get(`repos/${params.repository}`).then((response) => {\n            setRepository(response.data)\n        });\n        api.get(`repos/${params.repository}/issues`).then((response) => {\n            setIssues(response.data)\n        })\n    }, [params.repository]);\n\n    return (\n        <>\n            <Header>\n                <img src={logoImg} alt=\"Github Explorer\" />\n                <Link to=\"/\">\n                    <FiChevronsLeft size={16} />\n                Voltar\n            </Link>\n            </Header>\n\n            {repository && (\n                <RepositoryInfo>\n                    <header>\n                        <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n                    </header>\n                    <ul>\n                        <li>\n                            <strong>{repository.stargazers_count}</strong>\n                            <span>Starts</span>\n                        </li>\n                        <li>\n                            <strong>{repository.forks_count}</strong>\n                            <span>Forks</span>\n                        </li>\n                        <li>\n                            <strong>{repository.open_issues_count}</strong>\n                            <span>Issues abertas</span>\n                        </li>\n                    </ul>\n                </RepositoryInfo>\n            )}\n\n            <Issues>\n                {issues.map(issue => (\n                    <a key={issue.id} href={issue.html_url}>\n                        <div>\n                            <strong>{issue.title}</strong>\n                            <p>{issue.user.login}</p>\n                        </div>\n                        <FiChevronRight size={20} />\n                    </a>\n                ))}\n            </Issues>\n        </>\n    );\n};\n\nexport default Repository;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n    <Switch>\n        <Route path='/' exact={true} component={Dashboard} />\n        <Route path='/repositories/:repository+' component={Repository} />\n    </Switch>\n);\n\nexport default Routes;","import { createGlobalStyle } from 'styled-components'\n\nimport githubBackground from '../assets/githubBackground.svg';\n\nexport default createGlobalStyle`\n* {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    background: #F0F0F5 url(${githubBackground}) no-repeat 70%  top;\n    -webkit-font-smoothing: antialised;\n}\n\nbody, input, button{\n font: 16px Roboto, sans-serif;\n}\n\n#root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px\n}\n\nbutton {\n    cursor: pointer;\n}\n`\n","import React from 'react';\nimport Routes from './routes';\n\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => (\n  <>\n    <Routes />\n    <GlobalStyle />\n  </>\n)\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}